---
name: main
description: Main test
data:
  mainTestData: foo
dataExt:
  - dataExtMain

beforeTest:
  - envSwitch:
      bindData: { envName: myEnv }

runTest:
  - initData:
      const:
        directValue: direct
        bindedValue: myEnv

  - case:
      description: Colored Case atom
      runTest:
        - goTo:
            bindDescription: "'Going on page ' + url"
            bD: { url: baseUrl }

        - checkSelector:
            bindSelectors: { selector: nested.mainInput }
            errorIfResult: 'exists === false'
            options:
              screenshot: true

  - blank:
      bindDescription: "'Nested click ' + nested.mainInput"
      logOptions:
        textColor: black
        backgroundColor: white
      runTest:
        - clickSelector:
            bS: { selector: nested.mainInput }

  - blank:
      description: I am not showing in log
      logOptions:
        logThis: false

  - blank:
      description: Set result with colors
      logOptions:
        textColor: colorUnknown
        backgroundColor: colorUnknown
      result: { $i: 0 }

  - typeInput:
      bS: { selector: mainInput }
      bD: { text: $i }
      options: { noClearInput: true }
      result: { $i: $i + 1 }
      repeat: 2

  - typeInput:
      bS: { selector: mainInput }
      bD: { text: $i }
      disable: true

  - getText:
      bS: { selector: mainInput }
      r: { result: text }
      errorIfResult: "result !== '01'"

  - clickWithNestedWait:
      bS: { mainInputInside: mainInput }
      # debug: true
      o:
        hidden: false
        visible: true
        timeDelay: 0
        count: 1
        delay: 0
        button: left
        logAfter: false

  - waitTime:
      description: Checking If statement
      d: { time: 2000 }
      if: '1 !== 1'
      errorIf: '1 === 1'
      errorIfResult: '1 === 1'

  - getText:
      description: Get text with repeat
      s: { selector: title }
      r: { titleText: text }
      repeat: 3

  - blank:
      description: Some data function
      let: { myDataFunction: '"text".replace("text", "Title of HTML: ") + titleText' }

  - blank:
      description: Bind data from function
      const: { myDataBinded: myDataFunction }

  - typeInput:
      description: Input some text in field INPUT
      bS: { selector: mainInput }
      ðŸ”‘ðŸ“‹: { text: myDataBinded }
      o:
        screenshot: true
        fullpage: true

  # - cdpGetSelector:

  - todo:
      description: Make awesome test

  - subTest:

  - blank:

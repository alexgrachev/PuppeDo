---
name: main
description: Main test

data:
  mainTestData: foo

dataExt:
  - dataExtMain

beforeTest:
  - envSwitch:
      bindData: { envName: myEnv }

runTest:
  - goTo:
      bD: { url: baseUrl }

  - blank:
      runTest:
        - clickSelector:
            bS: { selector: nested.wikiInput }

  - blank:
      result: { $i: 0 }

  - typeInput:
      bS: { input: wikiInput }
      bD: { text: $i }
      result: { $i: $i + 1 }
      repeat: 2

  - getText:
      bS: { selector: wikiInput }
      r: { result: text }
      errorIfResult: "result !== '01'"

  - clickWithNestedWait:
      bS: { wikiInputInside: wikiInput }
      # debug: true
      o:
        hidden: false
        visible: true
        timeDellay: 0
        count: 1
        delay: 0
        button: left
        logAfter: false

  - waitTime:
      description: Checking If statement
      d: { time: 2000 }
      if: '1 !== 1'
      errorIf: '1 === 1'
      errorIfResult: '1 === 1'

  - getText:
      description: Get text with repeat
      s: { selector: title }
      r: { titleText: text }
      repeat: 3

  - blank:
      description: Some data function
      ðŸ”‘ðŸ“‹: { myDataFunction: '"text".replace("text", "Function text: ") + titleText' }

  - blank:
      description: Bind data from function
      ðŸ“ŒðŸ“‹: { myDataBinded: myDataFunction}

  - typeInput:
      description: Input some text in field INPUT
      bS: { input: wikiInput }
      bD: { text: myDataBinded }
      o:
        screenshot: true
        fullpage: true

  # - cdpGetSelector:

  - todo:
      description: Make awesome test

  - subTest:

  - blank:

---
name: mainWithError
type: test

data:
  mainTestData: foo

dataExt:
  - dataExtMain

beforeTest:
  - envSwitch:
      data: { envName: 'mainEnv' }

runTest:
  - goTo:
      bD: { url: baseUrl }
  - clickSelector:
      description: Input some text in field INPUT
      s: { selector: '.wikiInputFake' }